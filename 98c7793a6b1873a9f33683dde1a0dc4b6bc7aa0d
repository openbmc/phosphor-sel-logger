{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "088e5e2f_7844e395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-08-30T20:56:28Z",
      "side": 1,
      "message": "It looks like this commit was already merged to solve this problem: https://github.com/openbmc/phosphor-sel-logger/commit/9f476e82f72e78d2be6cdeb95f7d5552c19d97a7.\n\nHave you tried enabling the `clears-sel` option and using the phosphor-sel-logger `clearSelLogFiles()` function to see if it solves the problem?",
      "revId": "98c7793a6b1873a9f33683dde1a0dc4b6bc7aa0d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41381098_7db93d36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-09-02T16:15:23Z",
      "side": 1,
      "message": "the \u0027Solution\u0027 to the problem made it worse IMO because now there is even more configurations to keep track of. But you are right that there is a \u0027right\u0027 configuration where stuff works.\n\nComparing \ndbus-sdr/storagecommands.cpp:1167\nand\nsel_logger.cpp:119\n\nit is exactly the same code.\n\nLets have only one way of clearing the SEL that works and does not have to be configured every time in 2 separate projects.\n\nThere is no benefit to having this configurable, or did i miss it?\n\nMy suggestion would be to let ipmid clear the SEL since thats like the centerpiece of the IPMI implementation whereas sel-logger may not always be present.\n\nIf you agree then i would be willing to create the required patches.",
      "parentUuid": "088e5e2f_7844e395",
      "revId": "98c7793a6b1873a9f33683dde1a0dc4b6bc7aa0d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54dbb182_720a8eb0",
        "filename": "src/sel_logger.cpp",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-09-05T21:10:56Z",
      "side": 1,
      "message": "If the problem is that the file doesn\u0027t exist, might it be a better idea to delete the older (rotated) files and only truncate the current file? I am not sure if that would work for rsyslogd (does it keep an open file handle? maybe we need to also send SIGHUP or something to rsyslogd.)",
      "revId": "98c7793a6b1873a9f33683dde1a0dc4b6bc7aa0d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b76436b6_d372afca",
        "filename": "src/sel_logger.cpp",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-09-06T08:34:21Z",
      "side": 1,
      "message": "interesting. https://www.rsyslog.com/doc/v8-stable/compatibility/v4compatibility.html\n\nso HUP should close the file and then it could be truncated. \nBut since rsyslogd can receive new journal entries matching the filter in the meantime, it might try to open the file again, right?\n\nI view /var/log/ipmi_sel as specific to rsyslogd and don\u0027t think it would be a good idea to have other programs writing to that file. Also the behavior of SIGHUP in rsyslogd could change anytime in the future.\n\nWhat is your opinion on unifying the SEL clear behavior?",
      "parentUuid": "54dbb182_720a8eb0",
      "revId": "98c7793a6b1873a9f33683dde1a0dc4b6bc7aa0d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e881ca56_5d5bcb69",
        "filename": "src/sel_logger.cpp",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-09-06T20:14:02Z",
      "side": 1,
      "message": "\u003e (does it keep an open file handle? maybe we need to also send SIGHUP or something to rsyslogd.)\n\nYes, it keeps the file handle open. In IPMI after deleting the files, it reloads the rsyslog service to send it the HUP to restart the new file: https://github.com/openbmc/phosphor-host-ipmid/blob/master/dbus-sdr/storagecommands.cpp#L1172-L1177.\n\nIf I remember correctly, there is a configuration option in rsyslog to tell it to immediately create an empty file or wait until it gets a new log to create the file. We currently use the latter, but could change to immediately create a new file, if it would help.",
      "parentUuid": "b76436b6_d372afca",
      "revId": "98c7793a6b1873a9f33683dde1a0dc4b6bc7aa0d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}